// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Str = require("./Str.bs.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

function character(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.$$int, json),
          /* name */Json_decode.field("name", Json_decode.string, json),
          /* status */Json_decode.field("status", Json_decode.string, json),
          /* species */Json_decode.field("species", Json_decode.string, json)
        ];
}

function characters(json) {
  return Json_decode.list(character, json);
}

function results(json) {
  return /* record */[/* results */Json_decode.field("results", characters, json)];
}

var Decode = /* module */[
  /* character */character,
  /* characters */characters,
  /* results */results
];

function fetchCharacters() {
  return fetch("/api/character/").then((function (prim) {
                    return prim.json();
                  })).then((function (json) {
                  var results$1 = results(json);
                  return Promise.resolve(results$1[/* results */0]);
                })).catch((function () {
                return Promise.resolve(undefined);
              }));
}

function listCharacters(characters) {
  if (characters) {
    return React.createElement("ul", undefined, $$Array.of_list(List.map((function (character) {
                          return React.createElement("li", {
                                      key: String(character[/* id */0])
                                    }, ReasonReact.element(undefined, undefined, Str.make(character[/* name */1] + (" (" + (character[/* status */2] + ")")), /* array */[])));
                        }), characters)));
  } else {
    return React.createElement("p", undefined, ReasonReact.element(undefined, undefined, Str.make("No characters to speak of", /* array */[])));
  }
}

var component = ReasonReact.reducerComponent("FetchData");

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              console.log("We are mounting!");
              fetchCharacters(/* () */0).then((function (result) {
                      if (result !== undefined) {
                        return Promise.resolve(Curry._1(self[/* send */3], /* SetCharacters */Block.__(0, [result])));
                      } else {
                        return Promise.resolve(Curry._1(self[/* send */3], /* SetLoadingFailed */Block.__(1, ["Failed to load some characters."])));
                      }
                    }));
              return /* () */0;
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* status */0];
              if (typeof match === "number") {
                if (match !== 0) {
                  return React.createElement("div", undefined, listCharacters(self[/* state */1][/* characters */1]));
                } else {
                  return React.createElement("p", undefined, ReasonReact.element(undefined, undefined, Str.make("We are fetching some characters...", /* array */[])));
                }
              } else {
                return React.createElement("p", undefined, match[0]);
              }
            }),
          /* initialState */(function () {
              return /* record */[
                      /* status : Loading */0,
                      /* characters : [] */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _) {
              if (action.tag) {
                return /* Update */Block.__(0, [/* record */[
                            /* status : Error */[action[0]],
                            /* characters : [] */0
                          ]]);
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* status : Ready */1,
                            /* characters */action[0]
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.Decode = Decode;
exports.fetchCharacters = fetchCharacters;
exports.listCharacters = listCharacters;
exports.component = component;
exports.make = make;
/* component Not a pure module */

// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

function character(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.$$int, json),
          /* name */Json_decode.field("name", Json_decode.string, json),
          /* status */Json_decode.field("status", Json_decode.string, json),
          /* species */Json_decode.field("species", Json_decode.string, json)
        ];
}

function characters(json) {
  return Json_decode.list(character, json);
}

function results(json) {
  return /* record */[/* results */Json_decode.field("results", characters, json)];
}

var Decode = /* module */[
  /* character */character,
  /* characters */characters,
  /* results */results
];

function fetchCharacters() {
  return fetch("/api/character/").then((function (prim) {
                      return prim.json();
                    })).then((function (json) {
                    return Promise.resolve(results(json));
                  })).then((function (results) {
                  return Promise.resolve(results[/* results */0]);
                })).catch((function () {
                return Promise.resolve(undefined);
              }));
}

var component = ReasonReact.reducerComponent("FetchData");

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              console.log("We are mounting!");
              fetchCharacters(/* () */0).then((function (result) {
                      if (result !== undefined) {
                        return Promise.resolve(Curry._1(self[/* send */3], /* SetCharacters */[result]));
                      } else {
                        return Promise.resolve(Curry._1(self[/* send */3], /* SetCharacters */[/* [] */0]));
                      }
                    }));
              return /* () */0;
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", undefined, React.createElement("p", undefined, "We are fetching some characters!"), React.createElement("ul", undefined, $$Array.of_list(List.map((function (character) {
                                        return React.createElement("li", {
                                                    key: String(character[/* id */0])
                                                  }, character[/* name */1]);
                                      }), self[/* state */1][/* characters */0]))));
            }),
          /* initialState */(function () {
              return /* record */[/* characters : [] */0];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _) {
              return /* Update */Block.__(0, [/* record */[/* characters */action[0]]]);
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.Decode = Decode;
exports.fetchCharacters = fetchCharacters;
exports.component = component;
exports.make = make;
/* component Not a pure module */
